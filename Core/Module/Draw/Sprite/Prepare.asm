
                ifndef _CORE_MODULE_DRAW_SPRITE_UNIT_PREPARE_SPRITE_
                define _CORE_MODULE_DRAW_SPRITE_UNIT_PREPARE_SPRITE_
; -----------------------------------------
; подготовка спрайта перед выводм на экран
; In:
;   HL - адрес текущего спрайта
; Out:
;   BC  - размер спрайта (B - изначальная ширина, C - изначальная/изменённая высота) в пикселях
;   HL' - адрес экрана вывода
;   DE' - изначальный/изменённый адрес спрайта
;   В'  - старший байт адреса таблицы сдвига
;   С'  - количество пропускаемых байт, для спрайтов с общей маской
;   IX  - функция прохода
;   IY  - функция возврата
; Corrupt:
; Note:
; -----------------------------------------
Prepare:        EX DE, HL
                EXX

.Clip           ; ---------------------------------------------
                ; вертикальный клипинг
                ; ---------------------------------------------
                ; DE' - изначальный/изменённый адрес спрайта
                ; ---------------------------------------------

                ; размер спрайта (B - ширина, C - высота) в пикселях
.SpriteSize     EQU $+1
                LD BC, #0000

                ; -----------------------------------------
                ; расчёт положения спрайта по вертикали,
                ; относительно верхней границы видимой области
                ; -----------------------------------------

                ; приведение к форме хранения позиции 12.4
                ; SOy = OffsetY << 4
.SOy            EQU $+1
                LD L, #00
                LD A, L
                ADD A, A
                SBC A, A
                LD H, A
                LD A, L
                ADD A, A
                ADD A, A
                ADD A, A
                RL H
                ADD A, A
                RL H
                LD L, A

                ; HL = SOy + Position.Y
.PositionY      EQU $+1
                LD DE, #0000
                ADD HL, DE
                ADD HL, HL                                                      ; 1 сдвиг для всех вычислений

                ; преобразование высоты спрайта в 16-битное число
                LD D, #00
                LD A, C
                ADD A, A
                ADD A, A
                ADD A, A
                RL D
                ADD A, A
                RL D
                ADD A, A
                RL D
                LD E, A

                ; проверка пересечения верхней грани видемой области
                PUSH DE
                LD A, (GameConfig.UpEdgeChar)
                LD E, A
                LD A, H
                SUB E
                POP DE
                JP P, .BelowTop                                                 ; переход, если спрайт находится ниже верхней грани видимой области

                ; проверка нахождения спрайта (полностью) выше границы видимой области
                LD H, A
                OR A
                ADC HL, DE
                RET M

.ClipTop        ; ---------------------------------------------
                ; спрайт урезан верхней частью видимой области
                ; ---------------------------------------------
                ; HL  - хранит положение спрайта, относительно верхней границы видимой области
                ; DE  - 16-битное значение высоты спрайта
                ; BC  - изначальный размер спрайта (B - ширина, C - высота) в пикселях
                ; DE' - изначальный/изменённый адрес спрайта
                ; ---------------------------------------------

                ; приведение позиции спрайта 12.4 к 8-битному (экранное значение)
                ADD HL, HL
                ADD HL, HL
                ADD HL, HL

                ; проверка нахождения спрайта выше верхней границы области видимости
                LD A, H
                OR A
                RET Z                                                           ; выход, если после отброски остатка,
                                                                                ; положение спрайта осталось выше верхней границы области видимости
                ; расчёт количество пропускаемых строк
                LD A, C
                SUB H
                LD C, H                                                         ; сохранение новой высоты спрайта
                LD H, A                                                         ; сохранение количество пропускаемых строк

                ; ---------------------------------------------
                ; расчёт адреса в таблицы умножения
                ; ---------------------------------------------
                ; округление ширины до знакоместа
                LD A, B
                LD L, #00
                RRA
                ADC A, L
                RRA
                ADC A, L
                RRA
                ADC A, L
                DEC A                                                           ; начинается с 1
                RRCA
                RRCA
                RRCA
                DEC H                                                           ; начинается с 1
                XOR H
                AND %01100000
                XOR H

                ; результат:
                ;      7    6    5    4    3    2    1    0
                ;   +----+----+----+----+----+----+----+----+
                ;   | 0  | W1 | W0 | R4 | R3 | R2 | R1 | R0 |
                ;   +----+----+----+----+----+----+----+----+
                ;
                ;   W1,W0   [6,5]   - ширина спрайта в знакоместах
                ;   R4-R0   [4..0]  - количество пропускаемых строк
                
                LD L, A
                LD H, HIGH Adr.MultiplySprite
                LD A, (HL)

                ; корректировка размера пропускаемых данных спрайта,
                ; в зависимости от наличия маски у спрайта
                LD HL, GameConfig.SpriteFlagRef
                BIT CSIF_OR_XOR_BIT, (HL)
                JR Z, $+3
                ADD A, A


                ; корректировка начального адреса спрайта
                EXX
                ADD A, E
                LD E, A
                ADC A, D
                SUB E
                LD D, A
                EXX

                ; расчёт адрес экранной области
                LD A, (GameConfig.UpEdgeChar)
                ADD A, A    ; x2
                ADD A, A    ; x4
                ADD A, A    ; x8

                JR .ScrAdrRow

.ClipBottom     ; ---------------------------------------------
                ; спрайт урезан нижней частью видимой области
                ; ---------------------------------------------
                ; HL  - хранит положение спрайта, относительно нижней границы видимой области
                ; BC  - изначальный размер спрайта (B - ширина, C - высота) в пикселях
                ; DE' - изначальный/изменённый адрес спрайта
                ; A   - положение спрайта, относительно верхней границы видимой области
                ; ---------------------------------------------

                ; приведение позиции спрайта 12.4 к 8-битному (экранное значение)
                POP AF                                                          ; сброс значения в стеке
                ADD HL, HL
                ADD HL, HL
                ADD HL, HL
                
                ; корректировка высоты спрайта
                LD A, C
                SUB H
                LD C, A                                                         ; сохранение новой высоты спрайта

                ; положения верхней границы спрайта
                LD A, (GameConfig.DownEdgeChar)
                ADD A, A    ; x2
                ADD A, A    ; x4
                ADD A, A    ; x8
                SUB C
                EX AF, AF'                                                      ; сохранение положение спрайта, относительно верхней границы видимой области

                ; проверка наличия маски у спрайта
                EXX
                ; проверяется только один флаг,
                ; флаг CSIF_OR_XOR_BIT обязателен при наличии CSIF_MASK_BIT
                LD HL, GameConfig.SpriteFlagRef
                BIT CSIF_MASK_BIT, (HL)
                EXX
                JR Z, .NotMask                                                  ; переход, если у спрайта отсутствует маска

                ; расчёт адреса в таблицы умножения
                LD A, B
                SUB #08                                                         ; начинается с 1
                ADD A, A
                ADD A, A
                DEC H                                                           ; начинается с 1
                XOR H
                AND %01100000
                XOR H

                ; результат:
                ;      7    6    5    4    3    2    1    0
                ;   +----+----+----+----+----+----+----+----+
                ;   | 0  | W1 | W0 | R4 | R3 | R2 | R1 | R0 |
                ;   +----+----+----+----+----+----+----+----+
                ;
                ;   W1,W0   [6,5]   - ширина спрайта в знакоместах
                ;   R4-R0   [4..0]  - количество пропускаемых строк
                
                LD L, A
                LD H, HIGH Adr.MultiplySprite
                LD A, (HL)
                EXX
                LD B, A                                                         ; сохранение результата, для копирования спрайта с общей маской
                EXX

.NotMask        EX AF, AF'                                                      ; восстановление положение спрайта, относительно верхней границы видимой области
                JR .ScrAdrRow

.BelowTop       ; ---------------------------------------------
                ; спрайт находится ниже верхней границы видимой области
                ; ---------------------------------------------
                ; HL  - хранит положение спрайта, относительно верхней границы видимой области
                ; DE  - 16-битное значение высоты спрайта
                ; BC  - размер спрайта (B - ширина, C - высота) в пикселях
                ; DE' - изначальный/изменённый адрес спрайта
                ; ---------------------------------------------

                ; проверка нахождения спрайта ниже нижней границы видивой области
                PUSH DE
                LD A, (GameConfig.DownEdgeChar)
                LD E, A
                LD A, H
                SUB E
                POP DE
                
                RET NC                                                          ; выход, если результат положительный, т.к. спрайт находится
                                                                                ; ниже нижней границы видимой области

                ; проверка урезания спрайта нижней частью видимой областью
                PUSH HL                                                         ; сохранение положение спрайта, относительно верхней границы видимой области (в пикселях)
                LD H, A
                ADD HL, DE
                JR C, .ClipBottom                                               ; переход, если при добавлении размера спрайта по вертикали,
                                                                                ; произошло переполнене. значение положительное
                                                                                ; спрайт урезан нижней границей видивой области

                ; ---------------------------------------------
                ; спрайт полностью виден
                ; ---------------------------------------------

                ; приведение позиции спрайта 12.4 к 8-битному (экранное значение)
                POP HL                                                          ; восстановление положение спрайта, относительно верхней границы видимой области (в пикселях)
                ADD HL, HL
                ADD HL, HL
                ADD HL, HL
                LD A, H

.ScrAdrRow      ; расчёт адреса строки в экранной области
                EXX
                LD H, HIGH Adr.ScrAdrTable
                LD L, A
                LD A, (HL)
                INC H
                LD H, (HL)
                LD L, A
                EXX

.ClipRow        ; ---------------------------------------------
                ; горизонтальный клипинг
                ; ---------------------------------------------
                ; BC  - размер спрайта (B - изначальная ширина, C - изначальная/изменённая высота) в пикселях
                ; HL' - адрес экрана вывода
                ; DE' - изначальный/изменённый адрес спрайта
                ; B'  - количество пропускаемых байт, для спрайтов с общей маской
                ; С'  - положение видимой области по горизонтали в тайлах
                ; ---------------------------------------------

                ; -----------------------------------------
                ; расчёт положения спрайта по горизонтали,
                ; относительно левой границы видимой области
                ; -----------------------------------------

                ; приведение к форме хранения позиции (12.4)
                ; SOx = FCompositeSpriteInfo.Info.OffsetX << 4
.SOx            EQU $+1
                LD L, #00
                LD A, L
                ADD A, A
                SBC A, A
                LD H, A
                LD A, L
                ADD A, A
                ADD A, A
                ADD A, A
                RL H
                ADD A, A
                RL H
                LD L, A

                ; HL = SOx + FObject.Position.X
.PositionX      EQU $+1
                LD DE, #0000
                ADD HL, DE
                ADD HL, HL                                                      ; 1 сдвиг для всех вычислений

                ; преобразование ширины спрайта в 16-битное число
                LD D, #00
                LD A, B
                ADD A, A
                ADD A, A
                ADD A, A
                RL D
                ADD A, A
                RL D
                ADD A, A
                RL D
                LD E, A

                ; проверка пересечения верхней грани видемой области
                LD A, H
.LeftEdgeChar   EQU $+1                                                         ; в знакоместах
                SUB SCR_WORLD_POS_X
                JP P, .ToRightOfEdge                                            ; переход, если спрайт находится правее левой границы видимой области

                ; проверка нахождения спрайта (полностью) выше границы видимой области
                LD H, A
                OR A
                ADC HL, DE
                RET M

.ClipLeft       ; ---------------------------------------------
                ; спрайт урезан левой частью видимой области
                ; ---------------------------------------------
                ; HL  - положение правой границы спрайта относительно левой границы видимой области
                ; DE  - 16-битное значение ширины спрайта
                ; BC  - размер спрайта (B - изначальная ширина, C - изначальная/изменённая высота) в пикселях
                ; HL' - адрес экрана вывода
                ; DE' - изначальный/изменённый адрес спрайта
                ; B'  - количество пропускаемых байт, для спрайтов с общей маской
                ; С'  - количество пропускаемых байт, для спрайтов с общей маской
                ; ---------------------------------------------

                ; приведение позиции спрайта 12.4 к 8-битному (экранное значение)
                ADD HL, HL
                ADD HL, HL
                ADD HL, HL
                ; H - позиция спрайта по горизонтали в пикселях

                ; проверка нахождения спрайта выше верхней границы области видимости
                LD A, H
                OR A
                RET Z                                                           ; выход, если после отброски остатка,
                                                                                ; положение спрайта осталось левее левой границы области видимости

                ; расчёт ширины невидимой части спрайта в пикселях
                LD A, B
                SUB H

                ; округление до знакоместа
                NEG
                SRA A
                SRA A
                SRA A
                LD L, A

                ; откинуть смещение знакомест
                LD A, H
                SUB B
                AND #07
                ADD A, #28                                                      ; 5 знакомест * 8 (40 пикселей)
                LD H, A

                ; H   - позиция спрайта по горизонтали в пикселях
                ; L   - ширина невидимой части спрайта в знакоместах (-/+)
                JR .AdjustScrAdr

.ToRightOfEdge  ; ---------------------------------------------
                ; спрайт находится правее левой границы видимой области
                ; ---------------------------------------------
                ; HL  - хранит положение спрайта, относительно левой границы видимой области
                ; DE  - 16-битное значение ширины спрайта
                ; BC  - размер спрайта (B - изначальная ширина, C - изначальная/изменённая высота) в пикселях
                ; HL' - адрес экрана вывода
                ; DE' - изначальный/изменённый адрес спрайта
                ; B'  - количество пропускаемых байт, для спрайтов с общей маской
                ; С'  - количество пропускаемых байт, для спрайтов с общей маской
                ; ---------------------------------------------

                ; проверка нахождения спрайта правее правой границы видивой области
                LD A, H
.RightEdgeChar  EQU $+1                                                         ; в знакоместах
                SUB SCR_WORLD_POS_X + (SCR_WORLD_SIZE_X << 1) - 1
                RET NC                                                          ; выход, если результат положительный, т.к. спрайт находится
                                                                                ; правее правой границы видимой области

                ; проверка урезания спрайта правой частью видимой областью
                PUSH HL                                                         ; сохранение положение спрайта, относительно левой границы видимой области (в пикселях)
                LD H, A
                OR A
                ADC HL, DE
                POP HL                                                          ; восстановление положение спрайта, относительно левой границы видимой области (в пикселях)
                JR Z, .NoClip
                JR NC, .NoClip                                                  ; переход, если при добавлении размера спрайта по горизонтали,
                                                                                ; произошло переполнене. значение положительное
                                                                                ; спрайт полностью виден
.ClipRight      ; ---------------------------------------------
                ; спрайт урезан правой частью видимой области
                ; ---------------------------------------------
                ; HL  - хранит положение спрайта, относительно левой границы видимой области
                ; BC  - размер спрайта (B - изначальная ширина, C - изначальная/изменённая высота) в пикселях
                ; HL' - адрес экрана вывода
                ; DE' - изначальный/изменённый адрес спрайта
                ; B'  - количество пропускаемых байт, для спрайтов с общей маской
                ; С'  - количество пропускаемых байт, для спрайтов с общей маской
                ; ---------------------------------------------

                ; приведение позиции спрайта 12.4 к 8-битному (экранное значение)
                ADD HL, HL
                ADD HL, HL
                ADD HL, HL
                ; H -  позиции спрайта по горизонтали в пикселях

                ; расчёт ширины невидимой части спрайта в пикселях
                LD A, H
                ADD A, B
                SUB (SCR_WORLD_POS_X + (SCR_WORLD_SIZE_X << 1) - 1) * 8
                LD L, A
                LD A, B
                NEG
                AND 7
                ADD A, L
                OR A

                ; округление до знакоместа
                LD L, #00
                RRA
                ADC A, L
                RRA
                ADC A, L
                RRA
                ADC A, L
                LD L, A

                ; H   - позиция спрайта по горизонтали в пикселях
                ; L   - ширина невидимой части спрайта в знакоместах (-/+)
                JR .AdjustScrAdr

.NoClip         ; ---------------------------------------------
                ; спрайт полностью виден
                ; ---------------------------------------------

                ; приведение позиции спрайта 12.4 к 8-битному (экранное значение)
                ADD HL, HL
                ADD HL, HL
                ADD HL, HL
                LD L, #00                                                       ; спрайт виден полностью
                
.AdjustScrAdr   ; ---------------------------------------------
                ; H   - позиция спрайта по горизонтали в пикселях
                ; L   - ширина невидимой части спрайта в знакоместах (-/+)
                ; BC  - размер спрайта (B - изначальная ширина, C - изначальная/изменённая высота) в пикселях
                ; ---------------------------------------------

                ; корректировка адреса колонки в экранной области
                LD A, H
                RRA
                RRA
                RRA
                AND %00011111
                EXX
                OR L
                LD L, A
                EXX

                ; адрес таблицы спрайта без маски и без сдвига
                LD DE, Table.NoShiftFunc-2
                
                ; расчёт адреса таблицы смещения
                LD A, H
                AND %00000111
                JR Z, .NotShift                                                 ; переход, если сдвиг отсутствует

                ; адрес таблицы спрайта без маски и сдвигом
                LD DE, Table.ShiftFunc-2

                ; расчёт адреса таблицы, в зависимости от младших 3 бит
                EXX
                DEC A
                ADD A, A
                ADD A, HIGH Adr.ShiftTable
                LD B, A
                EXX

.NotShift       ; ---------------------------------------------
                ; L   - ширина невидимой части спрайта в знакоместах (-/+)
                ; DE  - адрес таблицы функций сдвига/без сдвига
                ; BC  - размер спрайта (B - изначальная ширина, C - изначальная/изменённая высота) в пикселях
                ; HL' - адрес экрана вывода
                ; DE' - изначальный/изменённый адрес спрайта
                ; В'  - старший байт адреса таблицы сдвига
                ; С'  - количество пропускаемых байт, для спрайтов с общей маской
                ; ---------------------------------------------
                LD A, L
                EX AF, AF'

                ; выбор таблицы от типа спрайта
                LD HL, GameConfig.SpriteFlagRef
                BIT CSIF_OR_XOR_BIT, (HL)
                EX DE, HL
                LD D, #00
                JR Z, $+5
                LD E, #08
                ADD HL, DE

                ; округление
                OR A
                LD A, B
                RRA
                ADC A, D
                RRA
                ADC A, D
                RRA
                ADC A, D
                ADD A, A

                ; приращение
                ADD A, L
                LD L, A
                ADC A, H
                SUB L
                LD H, A

                ; чтение адреса таблицы переходов
                LD A, (HL)
                INC HL
                LD H, (HL)
                LD L, A

                ; приведение к 16-битному значению
                EX AF, AF'
                ADD A, A
                ADD A, A
                LD E, A
                SBC A, A
                LD D, A
                ADD HL, DE

                ;
                LD A, (HL)
                LD IXL, A
                INC HL
                LD A, (HL)
                LD IXH, A
                INC HL

                ;
                LD A, (HL)
                LD IYL, A
                INC HL
                LD A, (HL)
                LD IYH, A

                SCF
                RET

                display " - Prepare Sprite Unit : \t\t\t\t", /A, Prepare, " = busy [ ", /D, $ - Prepare, " bytes  ]"

                endif ; ~ _CORE_MODULE_DRAW_SPRITE_UNIT_PREPARE_SPRITE_
